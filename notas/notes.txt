Documentacion oficial
https://git-scm.com/book/es/v1/Empezando-Acerca-del-control-de-versiones

Para ver la pagina en el root de github pages, nombrar al repositorio @username.github.io

Ver webpage
’nombre_usuario’.github.io/‘nombre_repositorio’ .

####################### Comandos    #######################
Primeras configuraciones
git config --global user.email alexbarba.2278@gmail.com
git config --global user.name "Alexis Barba"
git config --global color.ui true
git config --global core.editor "code --wait" (--wait porque va a esperar que se cierre la otra ventana)

Agregar archivos al repositorio
git add "filename" or git add .

Conocer el estado actual de mi repositorio
git status

Confirmar archivos en el repositorio

Git commit -m [“mensaje”]: Es bueno ser descriptivos con el mensaje para saber lo que se hizo en ese commit y para informar al resto de personas.

Conocer la historia de un archivo

git log <<archivo>>

Historia de todos los commits que hemos realizado

git log

Resumen git log --oneline

Visualizar los cambios realizados sobre un archivo

git show <<archivo>>

Ver los cambios entre una versión y otra de un mismo archivo

git diff <<commit_archivo_anterior>> <<commit_archivo_nuevo>> (el commit lo obtengo con git log <<archivo>>)

Volver en el tiempo sin retorno
git reset <<commit>> --soft (mantiene el staging en memoria)
git reset <<commit>> --hard (elimina todo y empieza en esa versión)

Ver cambios entre RAM (stagging) vs Memoria principal
git diff

Comparar un archivo en el tiempo
git checkout <<IDCommit>> <<archivo>>

Volver al archivo más actualizado (MASTER) (Último commit)
git checkout master <<archivo>>

Configurar git superlog

git config --global alias.superlog "log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all"



Etiquetado

git tag: nos permite agregar etiquetas a nuestros cambios.
-a para la anotación
-m para el mensaje

-l nos muestra la lista de etiquetas

-f para renombrar

-d para borrar



Herramienta para comparar
git diff 0.5 0.3

git diff [SHA-1] (Esa version vs la actual)
git diff [XXX-1] [XXX-2]

Regresar en el tiempo
git reset -- soft [SHA-1)
git reset --mixed
Ramas

Las ramas son muy importantes si quieres trabajar con un equipo y no quieres tocar la rama master para no crear conflictos,

git branch [nombre] se crea una nueva rama
-l: listamos las ramas
-d/-D [nombre]: borramos rama
-m [nombre] [nombre_nuevo]: para renombrar ramas


Moverse entre ramas/tiempo

git checkout [nombre/sha1]: Nos permite mover entre ramas y entre commits, no vamos a borrar nada. Acá es donde podemos movernos en el tiempo.

git checkout -b [nombre_rama]: Nos permite crear una nueva rama a partir de un commit

git merge [rama]: Nos permite mezclar los cambios realizados en dicha rama con la rama en la que estamos.

fast-forward: los mezcla automáticamente
recursive/auto-merging: ambas ramas salieron al mismo tiempo y hay algo nuevo en la rama que la otra no recuerda, por eso hace la mezcla recursiva.
manual merge: nos va a tocar decirle a git específicamente los cambios que queremos mezclar


Generar ssh key

https://help.github.com/enterprise/2.15/user/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/


Curso Actualizado de Freddy Vega

Qué es Git

Git es un software de control de versiones diseñado por Linus Torvalds, pensando en la eficiencia y la confiabilidad del mantenimiento de versiones de aplicaciones cuando estas tienen un gran número de archivos de código fuente. En su lugar GitHub es una forja para alojar proyectos utilizando el sistema de control de versiones Git. GitHub sería la red social de código para los programadores, tu propio curriculum vitae.

#######################
¿Por qué usar un sistema de control de versiones como Git?


Un sistema de control de versiones como Git nos ayuda a guardar el historial de cambios y crecimiento de los archivos de nuestro proyecto.

En realidad, los cambios y diferencias entre las versiones de nuestros proyecto pueden tener similitudes, algunas veces los cambios pueden ser solo una palabra o una parte específica de un archivo específico. Git está optimizado para guardar todos estos cambios de forma atómica e incremental, o sea, aplicando cambios sobre los últimos cambios, estos sobre los cambios anteriores y así hasta el inicio de nuestro proyecto.

    El comando para iniciar nuestro repositorio, o sea, indicarle a Git que queremos usar su sistema de control de versiones en nuestro proyecto, es git init.
    El comando para que nuestro repositorio sepa de la existencia de un archivo o sus últimos cambios es git add. Este comando no almacena las actualizaciones de forma definitiva, solo las guarda en algo que conocemos como “Staging Area” (no te preocupes, lo entenderemos más adelante).
    El comando para almacenar definitivamente todos los cambios que por ahora viven en el staging area es git commit. También podemos guardar un mensaje para recordar muy bien qué cambios hicimos en este commit con el argumento -m "Mensaje del commit".
    Por último, si queremos mandar nuestros commits a un servidor remoto, un lugar donde todos podamos conectar nuestros proyectos, usamos el comando git push.

####################### git rm  #######################


Este comando nos ayuda a eliminar archivos de Git sin eliminar su historial del sistema de versiones. Esto quiere decir que si necesitamos recuperar el archivo solo debemos “viajar en el tiempo” y recuperar el último commit antes de borrar el archivo en cuestión.

Recuerda que git rm no puede usarse así nomás. Debemos usar uno de los flags para indicarle a Git cómo eliminar los archivos que ya no necesitamos en la última versión del proyecto:

    git rm --cached: Elimina los archivos del área de Staging y del próximo commit pero los mantiene en nuestro disco duro.
    git rm --force: Elimina los archivos de Git y del disco duro. Git siempre guarda todo, por lo que podemos acceder al registro de la existencia de los archivos, de modo que podremos recuperarlos si es necesario (pero debemos usar comandos más avanzados).

git reset

Este comando nos ayuda a volver en el tiempo. Pero no como git checkout que nos deja ir, mirar, pasear y volver. Con git reset volvemos al pasado sin la posibilidad de volver al futuro. Borramos la historia y la debemos sobreescribir. No hay vuelta atrás.

Este comando es muy peligroso y debemos usarlo solo en caso de emergencia. Recuerda que debemos usar alguna de estas dos opciones:

Hay dos formas de usar git reset: con el argumento --hard, borrando toda la información que tengamos en el área de staging (y perdiendo todo para siempre). O, un poco más seguro, con el argumento --soft, que mantiene allí los archivos del área de staging para que podamos aplicar nuestros últimos cambios pero desde un commit anterior.

    git reset --soft: Borramos todo el historial y los registros de Git pero guardamos los cambios que tengamos en Staging, así podemos aplicar las últimas actualizaciones a un nuevo commit.
    git reset --hard: Borra todo. Todo todito, absolutamente todo. Toda la información de los commits y del área de staging se borra del historial.

¡Pero todavía falta algo!

    git reset HEAD: Este es el comando para sacar archivos del área de Staging. No para borrarlos ni nada de eso, solo para que los últimos cambios de estos archivos no se envíen al último commit, a menos que cambiemos de opinión y los incluyamos de nuevo en staging con git add, por supuesto.

####################### Notas   #######################


FLUJO DE TRABAJO BÁSICO EN GIT

En la carpeta donde estará mi repositorio.

    Iniciar el repositorio:$ git init
    Agregar un archivo al repositorio:$ git add archivo.txt
    Agregamos los cambios listos con un mensaje para recordar que se hizo:$ git commit -m “mensaje”
    Agregar todas las modificaciones(varios archivos) git add .
    Ver el estado del repositorio:$ git status
    Ver el histórico de cambios en el archivo:$ git log archivo.txt
    Guardar los cambios en el repositorio remoto:$ git push

RAMAS
Crear nueva rama -> git branch "nombre_rama"
Moverse a la nueva rama -> git checkout "nueva_rama"

GIT REBASE
rebase reescribe la historia del repositorio, cambia la historia de donde comenzó la rama y solo debe ser usado de manera local.
# Cambiamos a la rama que queremos traer los cambios
git checkout experimento
# Aplicamos rebase para traer los cambios de la rama que queremos 
git rebase master
#Luego hacemos lo mismo con master
git checkout master
git rebase experimento

GIT STASH
Guardar cambios en memoria y recuperarlos después
Cuando necesitamos regresar en el tiempo porque borramos alguna línea de código pero no queremos pasarnos a otra rama porque nos daría un error ya que debemos pasar ese “mal cambio” que hicimos a stage, podemos usar git stash para regresar el cambio anterior que hicimos.

git stash es típico cuando estamos cambios que no merecen una rama o no merecen un rebase si no simplemente estamos probando algo y luego quieres volver rápidamente a tu versión anterior la cual es la correcta.

comandos:
Guarda los cambios en memoria
    git stash
Crea una nueva rama con esos cambios
    git stash branch <nombre_nueva_rama>

GIT CLEAN
Limpiar tu proyecto de archivos no deseados

A veces creamos archivos cuando estamos realizando nuestro proyecto que realmente no forman parte de nuestro directorio de trabajo, que no se deberían agregar y lo sabemos.

Para saber qué archivos vamos a borrar tecleamos:
    git clean --dry-run
Para borrar todos los archivos listados (que no son carpetas) tecleamos:
    git clean -f

GIT CHERRY PICK
traer commits viejos al head de un branch
Existe un mundo alternativo en el cual vamos avanzando en una rama pero necesitamos en master uno de esos avances de la rama, para eso utilizamos el comando git cherry-pick IDCommit.

cherry-pick es una mala práctica porque significa que estamos reconstruyendo la historia, usa cherry-pick con sabiduría. Si no sabes lo que estás haciendo ten mucho cuidado.

AMEND
A veces hacemos un commit, pero resulta que no queríamos mandarlo porque faltaba algo más. Utilizamos git commit --amend, amend en inglés es remendar y lo que hará es que los cambios que hicimos nos los agregará al commit anterior.

GIT RESET Y REFLOG
úsese en caso de emergencia

Para ver los registros de comandos, usar:
git reflog

¿Qué pasa cuando todo se rompe y no sabemos qué está pasando? Con git reset HashDelHEAD nos devolveremos al estado en que el proyecto funcionaba.

    git reset --soft HashDelHEAD te mantiene lo que tengas en staging ahí.
    git reset --hard HashDelHEAD resetea absolutamente todo incluyendo lo que tengas en staging.

git reset es una mala práctica, no deberías usarlo en ningún momento; debe ser nuestro último recurso.

GIT GREP Y GIT LOG
A medida que nuestro proyecto se hace grande vamos a querer buscar ciertas cosas.

Por ejemplo: ¿cuántas veces en nuestro proyecto utilizamos la palabra color?

Para buscar utilizamos el comando git grep color y nos buscará en todo el proyecto los archivos en donde está la palabra color.

    Con git grep -n color nos saldrá un output el cual nos dirá en qué línea está lo que estamos buscando.
    Con git grep -c color nos saldrá un output el cual nos dirá cuántas veces se repite esa palabra y en qué archivo.
    Si queremos buscar cuántas veces utilizamos un atributo de HTML lo hacemos con git grep -c "<p>".

Examen
1 Git funciona para muchos tipos de archivo, ¿Qué tal funciona Git con archivos binarios?
2 ¿Qué guarda Git?
3 Los cambios a un archivo que están en “staging” están en:
4 ¿Qué es un branch o una rama en Git?
5 Con checkout puedo:
6 Un repositorio remoto y un repositorio local:
7 ¿El HEAD en una rama es?
8 ¿Cuándo debería hacer un merge?
9 ¿GitHub es? x
10 ¿Las llaves públicas son?
11 ¿Qué crean los tags en Git? x
12 En un repositorio público en GitHub, ¿qué puede hacer los colaboradores?
13 Para que dos personas trabajen en paralelo sobre el mismo archivo se recomienda:
14 Un pull request es:
15 El dueño de un repositorio al ver un pull request puede:
16 Cuando hago un fork de un proyecto en GitHub, ¿lo que logro es?
17 Si ya hiciste el desafío de “Hazme un pull request,” ¿dentro de cuál etiqueta tenías que agregar el cambio?
18 Si en el .gitignore agrego esto: images/*.js. ¿Cuál de los siguientes archivos sería ignorado?
19 Cuando usas git stash, los cambios que “guardas” temporalmente se guardan en:
20 ¿Cuándo deberías usar cherry-pick? x
21 Con amend puedo? x
22 ¿Qué puedes hacer con gitk?
23 ¿Cómo instalas Gitk? x
24 Es mejor aprender a manejar Git con la terminal antes de hacerlo con herramientas visuales como Gitk porque:
25 ¿Cómo llaman GitHub y GitLab a los "merges" (propuestas de cambios desde otra rama o repositorio)?
26 ¿Puedes conectar tu repositorio local con más de un repositorio remoto?
27 ¿Cuál es la diferencia entre git rm y git reset HEAD? x
28 ¿Para qué sirve git grep?
29 ¿Para qué sirve GitHub Pages?
30 El Jefe Freddy despidió a Anita y no piensa volver a contratarla. ¿Qué debe hacer Anita para seguir haciendo contribuciones a los proyectos públicos de Platzi?